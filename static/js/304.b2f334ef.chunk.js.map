{"version":3,"file":"static/js/304.b2f334ef.chunk.js","mappings":"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","sources":["api/PutPostEdit.jsx","pages/Posting/EditPost.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport default async function PutPostEdit(postId, token, content, images) {\n  try {\n    const response = await axios.put(\n      `https://api.mandarin.weniv.co.kr/post/${postId}`,\n      {\n        post: {\n          content: content,\n          image: images,\n        },\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-type': 'application/json',\n        },\n      },\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useRecoilValue } from 'recoil';\nimport { UserAtom } from '../../Store/userInfoAtoms';\n\n// import { PostImagesUpload } from '../../api/PostImagesUpload';\nimport PutPostEdit from '../../api/PutPostEdit';\nimport { GetUserProfileImage } from '../../api/GetUserProfileImage';\nimport { useLocation } from 'react-router-dom';\nimport { PostImagesUpload } from '../../api/PostImagesUpload';\nimport useTextareaResize from '../../Hooks/useTextareaResizeHook';\nimport ModalAlert from '../../components/Common/Modal/ModalAlert/ModalAlert';\nimport {\n  TextInputContainer,\n  ImagePreview,\n  EditUploadBtnNav,\n  ProfileContainer,\n  ProfileImage,\n  FileUploadButton,\n  ImgWrapStyle,\n  PreviewImgWrapStyle,\n  DeleteImgBtn,\n  PostFormStyle,\n} from './PostingStyle';\n\nexport default function EditPost() {\n  const location = useLocation();\n  const post = location.state || {};\n  const postId = post.id;\n  const [selectedImages, setSelectedImages] = useState([]);\n  const [previewImages, setPreviewImages] = useState([]);\n  const [inputValue, setInputValue] = useState('');\n  const [buttonStyle, setButtonStyle] = useState(false);\n  const [userImage, setUserImage] = useState('');\n  const navigate = useNavigate();\n  const userInfo = useRecoilValue(UserAtom);\n  const token = userInfo.token;\n\n  useEffect(() => {\n    GetUserProfileImage(token, setUserImage);\n  }, [token]);\n  useEffect(() => {\n\n    if (post.image) {\n      setSelectedImages(post.image.split(','));\n      setPreviewImages(post.image.split(','));\n    }\n    if (post.content) {\n      setInputValue(post.content);\n    }\n  }, [post.image, post.content]);\n\n\n  const { textarea, handleTextareaChange } = useTextareaResize(\n    inputValue,\n    setInputValue,\n  );\n  useEffect(() => {\n    if (inputValue || selectedImages.length > 0) {\n      setButtonStyle(true);\n    } else {\n      setButtonStyle(false);\n    }\n  }, [inputValue, selectedImages]);\n\n  const handleImageChange = async (event) => {\n    const files = await event.target.files[0];\n\n    try {\n      const imageUrl = await PostImagesUpload(files);\n      setSelectedImages((prevImages) => [...prevImages, imageUrl]);\n      const imagesArray = [...selectedImages, imageUrl];\n      if (imagesArray.length > 3) {\n        alert('이미지는 최대 3개까지 업로드가 가능합니다.');\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = () => {\n        setPreviewImages([...previewImages, reader.result]);\n      };\n      reader.readAsDataURL(files);\n    } catch (error) {\n      // 오류 처리\n      console.error(error);\n    }\n  };\n\n  const handleUploadPost = async () => {\n    const editedPost = await PutPostEdit(\n      postId,\n      token,\n      inputValue,\n      selectedImages.join(','),\n    );\n\n    if (editedPost) {\n      setInputValue('');\n      setSelectedImages([]);\n      navigate(`/post/${postId}`, {\n        state: postId,\n      });\n    }\n  };\n\n  const handleDeleteImage = (index) => {\n    const updatedImages = [...selectedImages];\n    updatedImages.splice(index, 1);\n    setSelectedImages(updatedImages);\n  };\n\n  return (\n    <div>\n      <EditUploadBtnNav\n        handleUploadPost={handleUploadPost}\n        buttonStyle={buttonStyle}\n        post={post}\n        currContent={inputValue}\n        currImg={selectedImages}\n      />\n      <ProfileContainer>\n        <ProfileImage src={userImage} alt='유저 프로필 이미지' />\n        <FileUploadButton handleImageChange={handleImageChange} />\n      </ProfileContainer>\n      <PostFormStyle>\n        <TextInputContainer\n          placeholder='게시글 입력하기..'\n          onChange={handleTextareaChange}\n          ref={textarea}\n          value={inputValue}\n        ></TextInputContainer>\n        <ImgWrapStyle>\n          {selectedImages.map((image, index) => (\n            <PreviewImgWrapStyle key={index}>\n              <ImagePreview\n                src={\n                  typeof image === 'string' ? image : URL.createObjectURL(image)\n                }\n                alt={`게시물 이미지 ${index + 1}`}\n              />\n              <DeleteImgBtn\n                onClick={() => handleDeleteImage(index)}\n                type='button'\n              />\n            </PreviewImgWrapStyle>\n          ))}\n        </ImgWrapStyle>\n      </PostFormStyle>\n    </div>\n  );\n}\n"],"names":["PutPostEdit","_x","_x2","_x3","_x4","_PutPostEdit","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","postId","token","content","images","response","wrap","_context","prev","next","axios","put","concat","post","image","headers","Authorization","sent","abrupt","data","t0","console","error","stop","EditPost","useLocation","state","id","_useState","useState","_useState2","_slicedToArray","selectedImages","setSelectedImages","_useState3","_useState4","previewImages","setPreviewImages","_useState5","_useState6","inputValue","setInputValue","_useState7","_useState8","buttonStyle","setButtonStyle","_useState9","_useState10","userImage","setUserImage","navigate","useNavigate","useRecoilValue","UserAtom","useEffect","GetUserProfileImage","split","_useTextareaResize","useTextareaResize","textarea","handleTextareaChange","length","handleImageChange","_ref","event","files","imageUrl","reader","target","PostImagesUpload","prevImages","_toConsumableArray","alert","FileReader","onload","result","readAsDataURL","handleUploadPost","_ref2","_callee2","_context2","join","_jsxs","children","_jsx","EditUploadBtnNav","currContent","currImg","ProfileContainer","ProfileImage","src","alt","FileUploadButton","PostFormStyle","TextInputContainer","placeholder","onChange","ref","value","ImgWrapStyle","map","index","PreviewImgWrapStyle","ImagePreview","URL","createObjectURL","DeleteImgBtn","onClick","updatedImages","splice","handleDeleteImage","type"],"sourceRoot":""}