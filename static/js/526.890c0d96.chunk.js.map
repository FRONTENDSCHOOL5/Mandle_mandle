{"version":3,"file":"static/js/526.890c0d96.chunk.js","mappings":"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","sources":["components/Common/Skeleton/UserSkeleton.jsx","components/Common/Skeleton/PostSkeleton.jsx","components/Common/Skeleton/Skeleton.jsx","pages/Home/PostBlank/PostBlankStyle.jsx","pages/Home/PostBlank/PostBlank.jsx","api/GetFollowPost.jsx","pages/Home/HomeStyle.jsx","pages/Home/Home.jsx","Hooks/useScroll.jsx"],"sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { Skeleton } from './Skeleton';\nimport MoreIcon from '../../../assets/img/icon-more-vertical.svg';\nexport default function UserSkeleton() {\n  return (\n    <SkeletonUserWrapper>\n      <SkeletonUserInfo>\n        <SkeletonUserImage></SkeletonUserImage>\n        <SkeletonUserDetails>\n          <SkeletonUserName></SkeletonUserName>\n          <SkeletonUserID></SkeletonUserID>\n        </SkeletonUserDetails>\n      </SkeletonUserInfo>\n      <SkeletonMoreButton src={MoreIcon} />\n    </SkeletonUserWrapper>\n  );\n}\n\nconst SkeletonUserWrapper = styled.div`\n  width: 100%;\n  height: 42px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst SkeletonUserInfo = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: center;\n`;\n\nconst SkeletonUserImage = styled(Skeleton)`\n  width: 42px;\n  height: 42px;\n  border-radius: 50%;\n`;\n\nconst SkeletonUserDetails = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 6px;\n`;\n\nconst SkeletonUserName = styled(Skeleton)`\n  width: 100px;\n  height: 14px;\n`;\nconst SkeletonUserID = styled(Skeleton)`\n  width: 80px;\n  height: 12px;\n`;\n\nconst SkeletonMoreButton = styled.img`\n  width: 18px;\n  height: 20px;\n`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport UserSkeleton from './UserSkeleton';\nimport { Skeleton } from './Skeleton';\nimport HeartBtn from '../../../assets/img/icon-heart.svg';\nimport ChatBtn from '../../../assets/img/icon-chat-mini.svg';\nexport default function PostSkeleton() {\n  return (\n    <SkeletonWrap>\n      <SkeletonPostList>\n        <UserSkeleton />\n        <SkeletonContent>\n          <SkeletonContentDetail>\n            <SkeletonContentDesc></SkeletonContentDesc>\n            <SkeletonContentImg></SkeletonContentImg>\n          </SkeletonContentDetail>\n          <SkeletonBtnWrap>\n            <img src={HeartBtn} alt='' />\n            <img src={ChatBtn} alt='' />\n          </SkeletonBtnWrap>\n          <SkeletonPostDate></SkeletonPostDate>\n        </SkeletonContent>\n      </SkeletonPostList>\n    </SkeletonWrap>\n  );\n}\n\nconst SkeletonWrap = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n`;\nconst SkeletonPostList = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-top: 10px;\n  padding-bottom: 20px;\n  gap: 16px;\n`;\nconst SkeletonContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding-left: 48px;\n`;\nconst SkeletonContentDetail = styled.div`\n  width: 304px;\n  display: flex;\n  gap: 16px;\n  flex-direction: column;\n`;\n\nconst SkeletonContentDesc = styled(Skeleton)`\n  width: 100%;\n  height: 14px;\n`;\nconst SkeletonContentImg = styled(Skeleton)`\n  height: 228px;\n  border-radius: 10px;\n`;\nconst SkeletonBtnWrap = styled.div`\n  display: flex;\n  gap: 31px;\n`;\n\nconst SkeletonPostDate = styled(Skeleton)`\n  width: 80px;\n  height: 12px;\n`;\n","import styled from 'styled-components';\n\nexport const Skeleton = styled.div`\n  width: 100%;\n  border-radius: 5px;\n  background-color: #c4c4c4;\n  animation: fade 2s infinite linear;\n\n  @keyframes fade {\n    0% {\n      opacity: 0.5;\n    }\n    50% {\n      opacity: 1;\n    }\n    100% {\n      opacity: 0.5;\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nexport const PostBlankWrap = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  gap: 10px;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  div {\n    margin-bottom: 10px;\n    text-align: center;\n    display: flex;\n    flex-direction: column;\n    gap: 6px;\n  }\n`;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport HomeLogo from '../../../assets/img/home-logo.svg';\nimport ButtonStyle from '../../../components/Common/Button';\nimport { PostBlankWrap } from './PostBlankStyle';\nexport default function PostBlank({ text, text2 }) {\n  return (\n    <PostBlankWrap>\n      <img src={HomeLogo} alt='만들만들 홈로고' />\n      <div>\n        <p>{text}</p>\n        {text2 && <p>{text2}</p>}\n      </div>\n      <Link to='/home/search'>\n        <ButtonStyle\n          width='120px'\n          height='44px'\n          color='#fff'\n          bg='#036635'\n          br='44px'\n        >\n          검색하기\n        </ButtonStyle>\n      </Link>\n    </PostBlankWrap>\n  );\n}\n","import axios from 'axios';\n\nexport default async function GetFollowPost(token, skip) {\n  try {\n    const response = await axios.get(\n      `https://api.mandarin.weniv.co.kr/post/feed?limit=5&skip=${skip}`,\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-type': 'application/json',\n        },\n      },\n    );\n    // data 객체 중 posts 객체 받아오기\n    return response.data.posts;\n  } catch (error) {\n    console.error(error);\n  }\n  return null; // try 실패 시 null값을 받아오도록\n}\n","import styled from 'styled-components';\nexport const HomeWrap = styled.div`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  font-size: var(--font-md);\n`;\n\nexport const MainWrap = styled.main`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  width: 100%;\n  height: calc(100% - 48px - 60px);\n  padding: 16px 16px;\n  overflow-y: scroll;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`;\nexport const PostUlStyle = styled.ul`\n  width: 100%;\n`;\n","import React, { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { HomeNav } from '../../components/Common/TopNav';\nimport { useNavigate } from 'react-router-dom'; // Assuming you're using React Router\n\nimport { AutoLogin, UserAtom } from '../../Store/userInfoAtoms';\nimport useScroll from '../../Hooks/useScroll';\nimport PostBlank from './PostBlank/PostBlank';\nimport GetFollowPost from '../../api/GetFollowPost';\nimport MenuBar from '../../components/Common/MenuBar';\nimport PostList from '../../components/Common/PostList/PostList';\nimport { HomeWrap, MainWrap, PostUlStyle } from './HomeStyle';\nimport PostSkeleton from '../../components/Common/Skeleton/PostSkeleton';\nexport default function Home({ to }) {\n  const userInfo = useRecoilValue(UserAtom); // UserAtom값 불러오기\n  const autoLogin = useRecoilValue(AutoLogin);\n  const token = userInfo.token; // token값 바인딩\n  const [skip, setSkip] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const [postList, setPostList] = useState([]); // 수정된 부분: 변수명 수정\n  const isBottom = useScroll(postList, '#scroll-area');\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const storedValue = localStorage.getItem('recoil-persist');\n    const lastAccessTime = localStorage.getItem('lastAccessTime'); // 유저의 마지막 접속 시간 가져오기\n    const currentTime = new Date().getTime(); // 현재 시간 가져오기\n\n    if (!storedValue) {\n      navigate('/intro');\n      return; // 추가된 부분: 나머지 로직을 실행하지 않고 종료\n    }\n\n    if (\n      lastAccessTime &&\n      currentTime - parseInt(lastAccessTime) > 24 * 60 * 60 * 1000\n    ) {\n      // 마지막 접속 시간과 현재 시간의 차이가 24시간 (86400000ms) 보다 크면..\n      if (!autoLogin) {\n        localStorage.removeItem('recoil-persist'); //유저정보 삭제\n        localStorage.removeItem('lastAccessTime'); // 마지막 접속 시간 삭제\n      }\n    } else {\n      // 24시간 이내에 접속한 경우, 현재 시간을 마지막 접속 시간으로 갱신\n      localStorage.setItem('lastAccessTime', currentTime.toString());\n    }\n\n    const beforeUnloadHandler = () => {\n      if (\n        autoLogin === false &&\n        lastAccessTime &&\n        currentTime - parseInt(lastAccessTime) > 24 * 60 * 60 * 1000\n      ) {\n        localStorage.removeItem('recoil-persist');\n      }\n    };\n\n    window.addEventListener('beforeunload', beforeUnloadHandler);\n\n    return () => {\n      window.removeEventListener('beforeunload', beforeUnloadHandler);\n      const storedValueAfter = localStorage.getItem('recoil-persist');\n      if (!storedValueAfter) {\n        navigate('/intro');\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const response = async () => {\n      const data = await GetFollowPost(token, skip);\n      if (data) {\n        setPostList((prevData) => [...prevData, ...data]);\n        setTimeout(() => {\n          setLoading(false); // 2초 뒤에 setLoading(false) 실행\n        }, 1000); // 2000ms = 2초\n        setSkip((prevSkip) => prevSkip + 5);\n      }\n    };\n    response();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isBottom]);\n\n  return (\n    <HomeWrap>\n      <HomeNav title='홈' to='/home/search'></HomeNav>\n      <MainWrap id='scroll-area'>\n        {loading ? (\n          <div>\n            <PostSkeleton />\n            <PostSkeleton />\n            <PostSkeleton />\n          </div>\n        ) : (\n          postList !== null &&\n          (postList.length === 0 ? (\n            <PostBlank text='유저를 검색해 팔로우 해보세요!' />\n          ) : (\n            <PostUlStyle>\n              {postList.map((post) => (\n                <PostList key={post.id} post={post} />\n              ))}\n            </PostUlStyle>\n          ))\n        )}\n      </MainWrap>\n      <MenuBar />\n    </HomeWrap>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport { throttle } from 'lodash';\nexport default function useScroll(data, id) {\n  // 1. 영역이 전체화면이 아닌 overflow-y:scroll이 적용되는 태그를 기준으로 하기 때문에\n  // 해당 태그에 id를 지정한 후 document.querySelector로 불러와 사용한다.\n  // 2. 스크롤이 적용되는 데이터 배열을 props(data-postList, followerList 등)로 가져온 이유는 보통 이 데이터 배열은 값을 불러오기 전 null값이 들어있는 상태에서 값이 변경되기 때문에\n  // 데이터 배열을 감싸는 태그인 scrollArea에도 처음에 null값이 담겨 오류가 발생할 수 있는 것을 막기 위함\n\n  const [isBottom, setIsBottom] = useState(false);\n\n  useEffect(() => {\n    const scrollArea = document.querySelector(id);\n    console.log('작동중', scrollArea.scrollTop);\n    const handleScroll = throttle(() => {\n      console.log('Throttled scroll event!');\n      if (\n        scrollArea.scrollTop + scrollArea.clientHeight + 1 >=\n        scrollArea.scrollHeight\n      ) {\n        console.log(\n          scrollArea.scrollTop,\n          scrollArea.clientHeight,\n          scrollArea.scrollHeight\n        );\n        setIsBottom(\n          scrollArea.scrollTop + scrollArea.clientHeight + 1 >=\n            scrollArea.scrollHeight\n        );\n      }\n    }, 2000); // 여기서 200은 200ms 간격으로 함수가 호출되게 설정합니다. 원하는 값으로 조절 가능합니다.\n\n    if (scrollArea) {\n      scrollArea.addEventListener('scroll', handleScroll);\n    }\n\n    // Clean up event listener on unmount\n    return () => {\n      if (scrollArea) {\n        scrollArea.removeEventListener('scroll', handleScroll);\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return isBottom;\n}\n"],"names":["UserSkeleton","_jsxs","SkeletonUserWrapper","children","SkeletonUserInfo","_jsx","SkeletonUserImage","SkeletonUserDetails","SkeletonUserName","SkeletonUserID","SkeletonMoreButton","src","MoreIcon","styled","div","_templateObject","_taggedTemplateLiteral","_templateObject2","Skeleton","_templateObject3","_templateObject4","_templateObject5","_templateObject6","img","_templateObject7","PostSkeleton","SkeletonWrap","SkeletonPostList","SkeletonContent","SkeletonContentDetail","SkeletonContentDesc","SkeletonContentImg","SkeletonBtnWrap","HeartBtn","alt","ChatBtn","SkeletonPostDate","_templateObject8","PostBlankWrap","PostBlank","_ref","text","text2","HomeLogo","Link","to","ButtonStyle","width","height","color","bg","br","GetFollowPost","_x","_x2","_GetFollowPost","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","token","skip","response","wrap","_context","prev","next","axios","get","concat","headers","Authorization","sent","abrupt","data","posts","t0","console","error","stop","HomeWrap","MainWrap","main","PostUlStyle","ul","Home","userInfo","useRecoilValue","UserAtom","autoLogin","AutoLogin","_useState","useState","_useState2","_slicedToArray","setSkip","_useState3","_useState4","loading","setLoading","_useState5","_useState6","postList","setPostList","isBottom","id","setIsBottom","useEffect","scrollArea","document","querySelector","log","scrollTop","handleScroll","throttle","clientHeight","scrollHeight","addEventListener","removeEventListener","useScroll","navigate","useNavigate","storedValue","localStorage","getItem","lastAccessTime","currentTime","Date","getTime","parseInt","removeItem","setItem","toString","beforeUnloadHandler","window","_ref2","prevData","_toConsumableArray","setTimeout","prevSkip","HomeNav","title","length","map","post","PostList","MenuBar"],"sourceRoot":""}