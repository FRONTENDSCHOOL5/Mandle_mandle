{"version":3,"file":"static/js/408.e561e3ff.chunk.js","mappings":"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","sources":["Store/userInfoAtoms.jsx","api/PutProfileUpdate.jsx","pages/Profile/EditProfile/EditProfileStyle.jsx","pages/Profile/EditProfile/EditProfile.jsx"],"sourcesContent":["import { atom } from 'recoil';\nimport { recoilPersist } from 'recoil-persist';\n\nconst { persistAtom } = recoilPersist();\n// 로그인된 유저 정보 저장\nexport const UserAtom = atom({\n  key: 'UserAtom',\n  default: {},\n  effects_UNSTABLE: [persistAtom],\n});\n\nexport const IsLogin = atom({\n  key: 'IsLogin',\n  default: false,\n  effects_UNSTABLE: [persistAtom],\n});\n\nexport const AutoLogin = atom({\n  key: 'AutoLogin',\n  default: false,\n  effects_UNSTABLE: [persistAtom],\n});\n","import axios from 'axios';\n\nexport default async function PutProfileUpdate(updatedUserValue, token) {\n  try {\n    const response = await axios.put(\n      'https://api.mandarin.weniv.co.kr/user',\n      {\n        user: {\n          username: updatedUserValue.username,\n          accountname: updatedUserValue.accountname,\n          intro: updatedUserValue.intro,\n          image: updatedUserValue.image,\n        },\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      }\n    );\n\n    return response.data;\n  } catch (error) {\n    console.error(error);\n  }\n}\n","import styled from 'styled-components';\n\nexport const SignupDiv = styled.div`\n  width: 390px;\n`;\nexport const ColorSet = styled.div`\n  padding: 20px;\n  #colorPicker {\n    width: 40px;\n    height: 40px;\n    position: absolute;\n    top: 160px;\n    left: 75%;\n  }\n`;\n\nexport const SignupHeader = styled.header`\n  text-align: center;\n  margin: 29px auto 12px;\n  position: relative;\n  button {\n    position: absolute;\n    left: 34px;\n  }\n`;\n\nexport const Heading1 = styled.h1`\n  font-size: var(--font-xl);\n`;\n\nexport const Wrap = styled.form`\n  padding: 0 34px;\n\n  #submitBtn {\n    display: block;\n    width: 160px;\n    height: 32px;\n    background-color: var(--sub-color);\n    color: rgb(255 255 255);\n    border-radius: 32px;\n    text-align: center;\n    margin: auto;\n  }\n\n  #submitBtn.active {\n    background-color: var(--main-color);\n  }\n`;\n\nexport const P = styled.p`\n  font-size: var(--font-sm);\n  color: #767676;\n  text-align: center;\n  margin-bottom: 30px;\n`;\n\nexport const SetProfileDiv = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n  ${(props) => props.first && 'margin-top: 30px;'}\n`;\n\nexport const SetProfileLabel = styled.label`\n  font-family: var(--font--Bold);\n  font-weight: 400;\n  color: #767676;\n  font-size: var(--font-sm);\n`;\n\nexport const SetProfileInputBox = styled.input`\n  border: none;\n  border-bottom: 1px solid #dbdbdb;\n  width: 322px;\n  padding: 8px 0;\n  box-sizing: border-box;\n  margin: auto;\n  &::placeholder {\n    color: #dbdbdb;\n  }\n  &:focus {\n    border-color: #036635;\n  }\n`;\n","import { React, useState } from 'react';\nimport styled from 'styled-components';\nimport ArrowImg from '../../../assets/img/icon-arrow-left.svg';\nimport UploadProfile from '../../../components/Common/UploadProfile';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport PostIdValid from '../../../api/PostIdValid';\nimport PutProfileUpdate from '../../../api/PutProfileUpdate';\nimport { UserAtom } from '../../../Store/userInfoAtoms';\nimport { useRecoilState } from 'recoil';\nimport GoBackButton from '../../../components/Common/GoBackButton';\nimport Input from '../../../components/Common/Account/Input';\nimport {\n  SignupHeader,\n  Heading1,\n  SignupDiv,\n  ColorSet,\n} from './EditProfileStyle';\nimport {\n  AccountForm,\n  Description,\n  ErrorMessage,\n} from '../../../components/Common/Account/AccountStyle';\n\nconst EditProfile = () => {\n  //기존 가입한 유저 정보 가져오기\n  const location = useLocation();\n  const data = location.state.profileData;\n  const [userInfo, setUserInfo] = useRecoilState(UserAtom);\n\n  const token = userInfo.token;\n  const navigate = useNavigate();\n  //유저 정보 상태관리\n\n  const [username, setUsername] = useState(data.username);\n  const accountType =\n    data.accountname.substr(0, 7) === 'Student' ||\n    data.accountname.substr(0, 7) === 'Teacher'\n      ? data.accountname.substr(0, 7)\n      : '';\n  const [accountname, setAccountname] = useState(\n    accountType ? data.accountname.substr(7) : data.accountname,\n  );\n  const intro = data.intro;\n  const colorMatch = intro.match(/#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})/);\n  const [backgroundColor, setBackgroundColor] = useState(\n    colorMatch ? colorMatch[0] : '',\n  );\n  const [introText, setIntroText] = useState(\n    intro.replace(backgroundColor, ''),\n  );\n  const [button, setButton] = useState(false);\n  const [image, setImage] = useState(data.image);\n\n  //유저 아이디 유효성검사\n\n  const [accountValid, setAccountValid] = useState(true);\n  const [accountAlertMsg, setAccountAlertMsg] = useState('');\n  //유저 이름 유효성검사\n  const [usernameValid, setUsernameValid] = useState(true);\n  const [usernameAlertMsg, setUsernameAlertMsg] = useState('');\n\n  const handleProfileImageResponse = (fileName) => {\n    setImage(fileName);\n    setButton(true);\n  };\n\n  // 입력란 값 변경 시 실행되는 함수x\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    // 입력란 값 변경\n    if (name === 'username') {\n      setUsername(value.trim());\n    } else if (name === 'accountname') {\n      setAccountname(value.trim());\n    } else if (name === 'intro') {\n      setIntroText(value);\n    }\n\n    handleActiveButton();\n    // 두 입력란에 값이 모두 존재할 경우 버튼 활성화 함수 실행\n  };\n  console.log(intro, colorMatch, introText);\n  //유저 이름 유효성 검사\n  const handleUsernameValid = () => {\n    if (username.length >= 2 && username.length <= 10) {\n      setUsernameAlertMsg('');\n      setUsernameValid(true);\n    } else {\n      setUsernameAlertMsg('유저 이름은 2자 이상~10자 이내여야 합니다.');\n      setUsernameValid(false);\n    }\n    // setUsername(value);\n  };\n\n  //아이디 유효성 검사\n  const handleAccountNameValid = async () => {\n    const pattern = /^[A-Za-z0-9_.]+$/;\n    if (pattern.test(accountname)) {\n      const validMessage = await PostIdValid(accountType + accountname);\n      if (validMessage === '사용 가능한 계정ID 입니다.') {\n        setAccountAlertMsg(validMessage);\n        setAccountValid(true);\n      } else {\n        setAccountValid(false);\n      }\n    } else {\n      setAccountAlertMsg('*영문, 숫자, 밑줄 및 마침표만 사용할 수 있습니다.');\n      setAccountValid(false);\n    }\n  };\n\n  const handleActiveButton = () => {\n    if (username !== '' && accountname !== '' && intro !== '') {\n      setButton(true);\n    } else {\n      setButton(false);\n    }\n  };\n\n  const handleColorChange = (event) => {\n    setBackgroundColor(event.target.value);\n  };\n  // console.log(colorMatch[0]);\n  const handleSetProfileSubmit = async () => {\n    const updatedUserValue = {\n      ...userInfo,\n      username: username,\n      accountname: accountType + accountname,\n      intro: introText + backgroundColor,\n      image: image,\n    };\n\n    const response = await PutProfileUpdate(updatedUserValue, token);\n    if (response) {\n      setUserInfo(updatedUserValue);\n      navigate(`/my_profile`);\n    }\n  };\n\n  const handleCheckValid = async (event) => {\n    event.preventDefault();\n    if (button === false) {\n      return; // 버튼 비활성화일 때 기능 막기\n    }\n    if (username && accountname && usernameValid) {\n      handleSetProfileSubmit();\n    }\n  };\n\n  return (\n    <SignupDiv>\n      <SignupHeader>\n        <GoBackButton />\n        <Heading1>프로필 수정</Heading1>\n      </SignupHeader>\n      <Description>변경사항 입력 후 저장 버튼을 눌러주세요.</Description>\n      <div className='App' style={{ backgroundColor }}>\n        <ColorSet>\n          <UploadProfile\n            onResponse={handleProfileImageResponse}\n            image={image}\n          />\n          <div id='colorPicker'>\n            <input\n              type='color'\n              value={backgroundColor}\n              onChange={handleColorChange}\n            />\n          </div>\n        </ColorSet>\n      </div>\n      <AccountForm first>\n        <Input\n          label='사용자 이름'\n          type='text'\n          name='username'\n          onChange={handleInputChange}\n          placeholder='2-10자 이내 여야 합니다'\n          value={username}\n          onBlur={handleUsernameValid}\n          borderColor={usernameAlertMsg ? 'var(--error-color)' : '#dbdbdb'}\n        />\n        {usernameAlertMsg && <ErrorMessage>{usernameAlertMsg}</ErrorMessage>}\n        <Input\n          label='계정 ID'\n          name='accountname'\n          onChange={handleInputChange}\n          onBlur={handleAccountNameValid}\n          value={accountname}\n          placeholder='영문, 숫자, 특수문자(.),(_)만 사용 가능합니다.'\n          borderColor={accountAlertMsg ? 'var(--error-color)' : '#dbdbdb'}\n        />\n        {accountAlertMsg && <ErrorMessage>{accountAlertMsg}</ErrorMessage>}\n        <Input\n          label='소개'\n          name='intro'\n          type='text'\n          value={introText}\n          placeholder='자신에 대해 소개해 주세요!'\n          onChange={handleInputChange}\n          borderColor='#dbdbdb'\n        />\n        <Button\n          id='submitBtn'\n          className={button ? 'active' : ''}\n          type='submit'\n          onClick={handleCheckValid}\n        >\n          저장\n        </Button>\n      </AccountForm>\n    </SignupDiv>\n  );\n};\n\nexport default EditProfile;\n\nconst Button = styled.button`\n  &#submitBtn {\n    display: block;\n    width: 100%;\n    height: 32px;\n    background-color: var(--sub-color);\n    color: rgb(255 255 255);\n    border-radius: 32px;\n    text-align: center;\n    margin-top: 20px;\n  }\n\n  &#submitBtn.active {\n    background-color: var(--main-color);\n  }\n`;\n"],"names":["persistAtom","recoilPersist","UserAtom","atom","key","default","effects_UNSTABLE","IsLogin","AutoLogin","PutProfileUpdate","_x","_x2","_PutProfileUpdate","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","updatedUserValue","token","response","wrap","_context","prev","next","axios","put","user","username","accountname","intro","image","headers","Authorization","concat","sent","abrupt","data","t0","console","error","stop","SignupDiv","styled","div","_templateObject","_taggedTemplateLiteral","ColorSet","_templateObject2","SignupHeader","header","_templateObject3","Heading1","h1","_templateObject4","form","_templateObject5","p","_templateObject6","_templateObject7","props","first","label","_templateObject8","input","_templateObject9","useLocation","state","profileData","_useRecoilState","useRecoilState","_useRecoilState2","_slicedToArray","userInfo","setUserInfo","navigate","useNavigate","_useState","useState","_useState2","setUsername","accountType","substr","_useState3","_useState4","setAccountname","colorMatch","match","_useState5","_useState6","backgroundColor","setBackgroundColor","_useState7","replace","_useState8","introText","setIntroText","_useState9","_useState10","button","setButton","_useState11","_useState12","setImage","_useState13","_useState14","setAccountValid","_useState15","_useState16","accountAlertMsg","setAccountAlertMsg","_useState17","_useState18","usernameValid","setUsernameValid","_useState19","_useState20","usernameAlertMsg","setUsernameAlertMsg","handleInputChange","event","_event$target","target","name","value","trim","handleActiveButton","log","handleAccountNameValid","_ref","validMessage","test","PostIdValid","handleSetProfileSubmit","_ref2","_callee2","_context2","_objectSpread","handleCheckValid","_ref3","_callee3","_context3","preventDefault","_jsxs","children","_jsx","GoBackButton","Description","className","style","UploadProfile","onResponse","fileName","id","type","onChange","AccountForm","Input","placeholder","onBlur","length","borderColor","ErrorMessage","Button","onClick"],"sourceRoot":""}